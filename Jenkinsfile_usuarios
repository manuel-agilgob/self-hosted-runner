// Scripted Pipeline para ejecutar tareas en paralelo para cada usuario


def obtenerToken(username, password) {
    def response = sh(
        script: """
            curl -X POST http://192.168.1.73:3000/token \
            -H "Content-Type: application/json" \
            -d '{"username": "${username}", "password": "${password}"}' \
            -s --fail
        """,
        returnStdout: true
    ).trim()
    
    def json = new groovy.json.JsonSlurper().parseText(response)
    return json.token
}


// Función para generar etapas paralelas para un runner
def crearParallelStage(String runnerName, List colaUsuarios, String rutaPruebas) {
    return {
        while (!colaUsuarios.isEmpty()) {
            def carpetaUsuario = colaUsuarios.remove(0) // Remover el primer usuario
            stage("Stage for ${rutaPruebas}/${carpetaUsuario}") {
                def token = obtenerToken("Pedro Pistolas", "Siempre viva 123")

                echo "Ejecutando pruebas para ${rutaPruebas}/${carpetaUsuario} con token ${token}"

                def specList = sh(script: "ls ${rutaPruebas}/${carpetaUsuario}", returnStdout: true).trim().split('\n')
                
                specList.each { spec ->
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        try {
                            sh(script: """
                            npx cypress run \
                            --spec ${rutaPruebas}/${carpetaUsuario}/${spec} \
                            --reporter cypress-mochawesome-reporter \
                            --quiet \
                            --env TOKEN=${token}
                            """)
                        } catch (Exception e) {
                            slackSend channel: 'D087F46G2D9', message: "La prueba ${rutaPruebas}/${carpetaUsuario} falló con ERROR: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
    }
}



node {


    stage('Clonar repositorio') {
        echo "Clonando repositorio..."
        deleteDir()
        checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/manuel-agilgob/self-hosted-runner.git']])
    }

    stage('Instalar dependencias') {
        echo "Instalando dependencias..."
        sh "npm install"  
    }


    def rutaPruebas = "cypress/e2e"
    def carpetasUsuarios = sh(script: "ls ${rutaPruebas}", returnStdout: true).trim().split('\n')
    def colaUsuarios = carpetasUsuarios as List
    echo "Carpetas por usuario: ${carpetasUsuarios}"

    stage('Generacion y ejecucion de stages de pruebas cypress') {
        def parallelStages = [:]

        parallelStages['Runner 1'] = crearParallelStage('Runner 1', colaUsuarios, rutaPruebas)
        parallelStages['Runner 2'] = crearParallelStage('Runner 2', colaUsuarios, rutaPruebas)
        parallelStages['Runner 3'] = crearParallelStage('Runner 3', colaUsuarios, rutaPruebas)
        parallelStages['Runner 4'] = crearParallelStage('Runner 4', colaUsuarios, rutaPruebas)
        parallelStages['Runner 5'] = crearParallelStage('Runner 5', colaUsuarios, rutaPruebas)
        parallelStages['Runner 6'] = crearParallelStage('Runner 6', colaUsuarios, rutaPruebas)
        

        parallel parallelStages
    }

    stage('Generar reporte html'){
        echo "Generando reporte html..."
        sh "npx mochawesome-merge 'reports/.jsons/*.json' > reports/merged-report.json "
        sh "npx marge --reportDir=reports --reportTitle='Reporte de pruebas Cypress' --reportFilename='Reporte compilado cypress' --inline reports/merged-report.json"
    }

    stage ('Generando artefactos'){
        echo "Publicando reportes..."
        archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true 
        slackUploadFile filePath: 'reports/Reporte de pruebas Cypress.html', initialComment: 'Reporte de ejecucion de pruebas Cypress/Jenkins'      
    }


}



