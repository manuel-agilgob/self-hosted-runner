// Scripted Pipeline para ejecutar tareas en paralelo para cada usuario


def obtenerToken(username, password) {
    def response = sh(
        script: """
            curl -X POST http://192.168.1.73:3000/token \
            -H "Content-Type: application/json" \
            -d '{"username": "${username}", "password": "${password}"}' \
            -s --fail
        """,
        returnStdout: true
    ).trim()
    
    def json = new groovy.json.JsonSlurper().parseText(response)
    return json.token
}


node {


    stage('Checkout') {
        echo "Clonando repositorio..."
        deleteDir()
        checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/manuel-agilgob/self-hosted-runner.git']])
    }

    stage('Instalar dependencias') {
        echo "Instalando dependencias..."
        sh "npm install"  
    }



    def rutaPruebas = "cypress/e2e"
    def carpetasUsuarios = sh(script: "ls ${rutaPruebas}", returnStdout: true).trim().split('\n')
    def colaUsuarios = carpetasUsuarios as List
    echo "Carpetas por usuario: ${carpetasUsuarios}"


    def carpetaUsuarioRunner1 = ''
    def carpetaUsuarioRunner2 = ''

    stage('Generacion dinamica de stages de pruebas') {
        def parallelStages = [:]


        // Definir las etapas paralelas
        parallelStages['Runner 1'] = {
            while (!colaUsuarios.isEmpty()){
                carpetaUsuarioRunner1 = colaUsuarios.remove(0)  // Remover el primer usuario
                stage("Stage for ${rutaPruebas}/${carpetaUsuarioRunner1}") {
                    
                    
                    def token_r1 = obtenerToken("Juan Tuercas", "Calle falsa 123")

                    echo "Ejecutando pruebas para ${rutaPruebas}/${carpetaUsuarioRunner1} con token ${token_r1}"

                    sh(script: """
                        npx cypress run \
                        --spec ${rutaPruebas}/${carpetaUsuarioRunner1}/*cy.js \
                        --reporter cypress-mochawesome-reporter \
                        --quiet  \
                        --env TOKEN=${token_r1}""")
                }
            }
        }



        parallelStages['Runner 2'] = {
            while (!colaUsuarios.isEmpty()){
                carpetaUsuarioRunner2 = colaUsuarios.remove(0)  // Remover el primer usuario
                stage("Stage for ${rutaPruebas}/${carpetaUsuarioRunner2}") {
                    
                    
                    def token_r2 = obtenerToken("Pedro Pistolas", "Siempre viva 123")

                    echo "Ejecutando pruebas para ${rutaPruebas}/${carpetaUsuarioRunner2} con token ${token_r2}"

                    sh(script: """
                        npx cypress run \
                        --spec ${rutaPruebas}/${carpetaUsuarioRunner2}/*cy.js \
                        --reporter cypress-mochawesome-reporter \
                        --quiet  \
                        --env TOKEN=${token_r2}""")
                }
            }
        }


        // Ejecutar las etapas en paralelo
        parallel parallelStages
    }

    stage('Generar reporte html'){
        echo "Generando reporte html..."
        sh "npx mochawesome-merge 'reports/.jsons/*.json' > reports/merged-report.json "
        sh "npx marge --reportDir=reports --reportTitle='Reporte de pruebas Cypress' --reportFilename='Reporte compilado cypress' --inline reports/merged-report.json"
    }

    stage ('Generando artefactos'){
        echo "Publicando reportes..."
        archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true        
    }
}
