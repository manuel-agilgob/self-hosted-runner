// Scripted Pipeline para ejecutar tareas en paralelo para cada usuario

node {


    stage('Checkout') {
        echo "Clonando repositorio..."
        deleteDir()
        checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/manuel-agilgob/self-hosted-runner.git']])
    }

    stage('Instalar dependencias') {
        echo "Instalando dependencias..."
        sh "npm install"  
    }



    def rutaPruebas = "cypress/e2e"
    def carpetasUsuarios = sh(script: "ls ${rutaPruebas}", returnStdout: true).trim().split('\n')
    def colaUsuarios = carpetasUsuarios as List
    echo "Carpetas por usuario: ${carpetasUsuarios}"


    def carpetaUsuarioRunner1 = ''
    def carpetaUsuarioRunner2 = ''

    stage('Generacion dinamica de stages de pruebas') {
        def parallelStages = [:]


        // Definir las etapas paralelas
        parallelStages['Runner 1'] = {
            while (!colaUsuarios.isEmpty()){
                carpetaUsuarioRunner1 = colaUsuarios.remove(0)  // Remover el primer usuario
                stage("Stage for ${rutaPruebas}/${carpetaUsuarioRunner1}") {
                    echo "Ejecutando pruebas para ${rutaPruebas}/${carpetaUsuarioRunner1}"
                    sh(script: "npx cypress run --spec ${rutaPruebas}/${carpetaUsuarioRunner1}/*cy.js --reporter mochawesome --quiet")
                }
            }
        }


        parallelStages['Runner 2'] = {
            while (!colaUsuarios.isEmpty()){
                carpetaUsuarioRunner2 = colaUsuarios.remove(0)  // Remover el primer usuario
                stage("Stage for ${rutaPruebas}/${carpetaUsuarioRunner2}") {
                    echo "Ejecutando pruebas para ${rutaPruebas}/${carpetaUsuarioRunner2}"
                    sh(script: "npx cypress run --spec ${rutaPruebas}/${carpetaUsuarioRunner2}/*cy.js --reporter mochawesome --quiet")
                }
            }
        }


        // Ejecutar las etapas en paralelo
        parallel parallelStages
    }

    post {
        always {
            stage('Publicar Reportes') {
                echo "Publicando reportes..."
                archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
            }
        }
    }
}
