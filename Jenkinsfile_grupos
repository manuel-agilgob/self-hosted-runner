// This is a basic Jenkinsfile that will run Cypress tests in parallel and generate a combined report at the end.
// The tests are divided into three groups: actions, assertions and location.
// The tests are executed in parallel and then one by one.

pipeline {
    agent any

    tools {nodejs "node23"}

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    if (fileExists('package.json')) {
                        sh 'npm install'
                    } else {
                        error 'package.json not found'
                    }
                }
            }
        }

        stage('Run Cypress Tests in Parallel') {

            parallel {
                stage('Run Actions Tests') {
                    steps {
                        script {
                            sh 'npx cypress run --headless --spec "cypress/e2e/grupo1/actions.cy.js"'
                        }
                    }
                }
                stage('Run Assertions Tests') {
                    steps {
                        script {
                            sh 'npx cypress run --headless --spec "cypress/e2e/grupo1/assertions.cy.js"'
                        }
                    }
                }
                stage('Run Location Tests') {
                    steps {
                        script {
                            sh 'npx cypress run --headless --spec "cypress/e2e/grupo1/location.cy.js"'
                        }
                    }
                }
            }
        }

       

    }

    post {
        always {
            script {
                // Fusionar reportes JSON generados por Mochawesome
                sh 'npx mochawesome-merge reports/.jsons/*.json > reports/merged-report.json'
                
                // Generar un reporte HTML único con recursos embebidos
                sh 'npx marge reports/merged-report.json --reportFilename Reporte.html --reportDir reports --inline true'
                
                // Verificar que el reporte HTML fue generado correctamente
                sh 'ls -al reports'  // Lista el contenido del directorio reports
                
                // Archivar el reporte HTML generado
                archiveArtifacts artifacts: 'reports/Reporte.html', allowEmptyArchive: true
                
                // Archivar todos los demás reportes generados (opcional)
                archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
            }

            // Publicar el reporte HTML generado
            publishHTML(
                target: [
                    reportName: 'Reporte Pruebas Cypress', 
                    reportDir: 'reports/',  
                    reportFiles: 'Reporte.html',  
                    keepAll: true,
                    alwaysLinkToLastBuild: false,
                    allowMissing: false
            ])
        }
    }


}
